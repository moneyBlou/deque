#include <iostream>
#include <cctype>
#include <string> 

using namespace std;

class Deque {
private:
	char* arr;// Указатель на динамически выделенный массив 
	int front; // Индекс первого элемента в деке (голова дека)
	int back; // Индекс последнего элемента в деке (хвост дека)
	int size; // Текущее колво элементов в деке
	int capacity; // Текущая вместимость в деке

public:
	//Конструктор, initialCapacity - начальная вместимость дека
	Deque(int initialCapacity = 10) {
		capacity = initialCapacity; // Устанавливаем начальную вместимость
		arr = new char[capacity]; // Выделяем память под массив 
		front = 0; // 
		back = -1;
		size = 0;
	}

	//Деструктор
	~Deque() {
		delete[] arr;
	}

	//Метод для проверки, пуст ли дек
	bool isEmpty() {
		return size == 0;
	}

	//Метод для получения текущего размера дека
	int getSize() {
		return size;
	}

	// Метод для получания текущей вместительности дека
	int detCapacity() {
		return capacity;
	}

	void resize() {
		int newCapacity = capacity * 2; // Удваиваем вмесительность   
		char* newArr = new char[newCapacity]; // Выделяем память под текущий массив

		//Копируем элементы
		// Важно: Копирование выполняется с учетом циклического поведения дека
		int j = 0;
		for (int i = front; j < size; j++, i = (i + 1) % capacity) {
			newArr[j] = arr[i];
		}

		delete[] arr; // Освобождаем память, выделенную под старый массив
		arr = newArr;  // Указываем указатель arr на новый массив
		front = 0;  // Сбрасываем front на 0, так как элементы теперь находятся в начале нового массива
		back = size - 1;  // Обновляем back (последний элемент)
		capacity = newCapacity;  // Обновляем capacity (теперь она удвоена)

		cout << "Размер дека увеличен: " << capacity << endl; // Выводим сообщение об увеличении размера (для отладки)
	}

	// Метод для добавления элемента в начало дека (push_front)
	void push_front(char element) {
		// Проверяем, нужно ли увеличивать размер дека
		if (size == capacity) {
			resize();// Увеличиваем размер дека, если он заполнен
		}

		// Вычисляем новый индекс front, используя циклическое поведение
		front = (front - 1 + capacity) % capacity;
		// Добавляем элемент в массив по новому индексу front
		arr[front] = element;
		// Увеличиваем размер дека на 1
		size++;

		// Если это первый элемент, который мы добавляем в дек, то back должен указывать на тот же элемент, что и front
		if (back == -1) {
			back = front;
		}
	}

	// Метод для добавления элемента в конец дека (push_back)
	void push_back(char element) {
		// Вычисляем новый индекс back, используя циклическое поведение
		if (size == capacity) {
			resize();
		}
		// Вычисляем новый индекс back, используя циклическое поведение
		back = (back + 1) % capacity;
		// Добавляем элемент в массив по новому индексу back
		arr[back] = element;

		size++;

		// Если это первый элемент, который мы добавляем в дек, то front должен указывать на тот же элемент, что и back
		if (front == 0 && size == 1) {
			front = back;
		}
	}

	// Метод для удаления элемента с начала дека (pop_front)
	char pop_front() {

		// Проверяем, не пуст ли дек
		if (isEmpty()) {
			cout << "Ошибка! Дек пуст!" << endl; // Выводим сообщение об ошибке, если дек пуст
			return '\0';
		}

		// Сохраняем значение элемента, который нужно удалить

		char element = arr[front];

			front = (front + 1) % capacity;
			//Уменьшаем дек на 1
			size--;
			
			// Если дек стал пуст, сбрасываем front и back в начальное состояние
			if (isEmpty()) {
				front = 0;
				back = -1;
			}

			// Возвращаем удаленный элемент
			return element;
	}

	// Метод для удаления элемента с конца дека (pop_back)
	char pop_back() {
		if (isEmpty()) {
			cout << "Ошибка! Дек пуст!" << endl; // Выводим сообщение об ошибке, если дек пуст
			return '\0';
		}

		// Сохраняем значение элемента, который нужно удалить
		char element = arr[back];

		back = (back - 1 + capacity) % capacity;
		//Уменьшаем дек на 1
		size--;

		// Если дек стал пуст, сбрасываем front и back в начальное состояние
		if (isEmpty()) {
			front = 0;
			back = -1; 
		}
		// Возвращаем удаленный элемент
		return element;
	}

	// Метод для получения элемента с начала дека (без удаления)
	char get_front() {
		//Проверка, не пуст ли дек
		if (isEmpty()) {
			cout << "Ошибка! Дек пуст!" << endl;
			return '\0';
		}

		return arr[front];
	}

	// Метод для получения элемента с конца дека (без удаления)
	char get_back() {
		//Проверка, не пуст ли дек
		if (isEmpty()) {
			cout << "Ошибка! Дек пуст!" << endl;
			return '\0';
		}

		return arr[back];
	}

	char get_element_at(int index) {
		// Проверяем, пуст ли Deque, или находится ли index вне допустимых границ.
		if (isEmpty() || index < 0 || index >= size) {
			// Если одно из условий выше выполнено, выводим сообщение об ошибке.
			cout << "Ошибка! Дек пуст!" << endl;
			// Возвращаем нулевой символ '\0', чтобы указать на ошибку.
			return '\0';
		}

		// Вычисляем фактический индекс элемента в массиве arr с учетом циклического поведения.
		// (front + index) % capacity:
		//   - front: Индекс начала Deque в массиве arr.
		//   - index: Смещение относительно начала Deque, которое мы хотим получить.
		//   - front + index: Вычисляет абсолютный индекс элемента, если бы массив не был циклическим.
		//   - % capacity: Берет остаток от деления на capacity, чтобы учесть циклическое поведение.
		//     Если front + index >= capacity, то % capacity "заворачивает" индекс обратно в начало массива.
		return arr[(front + index) % capacity];
	}

	// Метод для вывода содержимого дека (для отладки и демонстрации)
	void printDeque() {
		// Проверяем, не пуст ли дек
		if (isEmpty()) {
			cout << "Ошибка! Дек пуст!" << endl; // Выводим сообщение, если дек пуст
			return;                              // Завершаем выполнение метода
		}

		cout << "Элементы дека: "; // Выводим заголовок

		// Проходим по всем элементам дека и выводим их
		int i = front;
		for (int j = 0; j < size; ++j) {
			cout << arr[i] << " ";  // Выводим текущий элемент
			i = (i + 1) % capacity; // Переходим к следующему элементу, используя циклическое поведение
		}

		cout << endl; // Выводим символ новой строки
	}

};

// Функция для проверки, является ли строка палиндромом
bool isPalindrome(const string& str) {
	Deque dq; // Создаем экземпляр класса Deque

	// Заполняем дек символами строки (приводим к нижнему регистру)
	for (char c : str) {
		if (isalpha(c)) { // Проверяем, является ли символ буквой (isalpha)
			dq.push_back(tolower(c)); // Добавляем букву в дек в нижнем регистре
		}
	}

	int size = dq.getSize(); // Получаем размер дека

	if (size <= 1) {
		return true; // Пустая строка или строка с одним символом - палиндром
	}

	// Цикл для сравнения символов с начала и с конца строки
	for (int i = 0; i < size / 2; ++i) {
		// Сравниваем символ с начала строки с символом с конца строки
		if (dq.get_element_at(i) != dq.get_element_at(size - 1 - i)) {
			return false; // Если символы не совпадают - не палиндром
		}
	}

	return true; // Если все символы совпали - палиндром
}

int main() {

	// Объявляем и инициализируем три строковые переменные с тестовыми значениями.
	string str1 = "rotor";       // Строка "rotor", которая является палиндромом.
	string str2 = "Racecar";     // Строка "Racecar", которая также является палиндромом (с учетом игнорирования регистра).
	string str3 = "Penis";         // Строка "Penis", которая не является палиндромом.

	// Выводим в консоль результаты проверки каждой из этих строк на палиндромность.
	// Используем тернарный оператор (condition ? value_if_true : value_if_false)
	// для вывода "true" или "false" в зависимости от результата isPalindrome().
	cout << str1 << " is palindrome: " << (isPalindrome(str1) ? "true" : "false") << endl; // Выведет "rotor is palindrome: true"
	cout << str2 << " is palindrome: " << (isPalindrome(str2) ? "true" : "false") << endl; // Выведет "Racecar is palindrome: true"
	cout << str3 << " is palindrome: " << (isPalindrome(str3) ? "true" : "false") << endl; // Выведет "Penis is palindrome: false"

	// Объявляем строковую переменную userExpression для хранения строки, введенной пользователем.
	string userExpression;

	// Выводим в консоль запрос пользователю на ввод строки.
	cout << "Enter a string: ";

	// Считываем строку, введенную пользователем, из стандартного потока ввода (cin)
	// и сохраняем её в переменной userExpression.
	// Функция getline() считывает всю строку, включая пробелы, до нажатия Enter.
	getline(cin, userExpression);

	// Выводим в консоль результат проверки введенной пользователем строки на палиндромность.
	// Аналогично, используем тернарный оператор для вывода "true" или "false".
	cout << userExpression << " is palindrome: " << (isPalindrome(userExpression) ? "true" : "false") << endl;

	// Возвращаем 0, что означает успешное завершение программы.
	return 0;
}

